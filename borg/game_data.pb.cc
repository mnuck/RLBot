// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_data.proto

#include "game_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace rlbot {
namespace api {
class ControllerStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControllerState>
      _instance;
} _ControllerState_default_instance_;
class Vector3DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vector3>
      _instance;
} _Vector3_default_instance_;
class RotatorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rotator>
      _instance;
} _Rotator_default_instance_;
class TouchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Touch>
      _instance;
} _Touch_default_instance_;
class ScoreInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ScoreInfo>
      _instance;
} _ScoreInfo_default_instance_;
class PlayerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerInfo>
      _instance;
} _PlayerInfo_default_instance_;
class BallInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BallInfo>
      _instance;
} _BallInfo_default_instance_;
class BoostInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BoostInfo>
      _instance;
} _BoostInfo_default_instance_;
class GameInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameInfo>
      _instance;
} _GameInfo_default_instance_;
class GameTickPacketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameTickPacket>
      _instance;
} _GameTickPacket_default_instance_;
}  // namespace api
}  // namespace rlbot
namespace protobuf_game_5fdata_2eproto {
void InitDefaultsControllerStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::rlbot::api::_ControllerState_default_instance_;
    new (ptr) ::rlbot::api::ControllerState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rlbot::api::ControllerState::InitAsDefaultInstance();
}

void InitDefaultsControllerState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsControllerStateImpl);
}

void InitDefaultsVector3Impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::rlbot::api::_Vector3_default_instance_;
    new (ptr) ::rlbot::api::Vector3();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rlbot::api::Vector3::InitAsDefaultInstance();
}

void InitDefaultsVector3() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVector3Impl);
}

void InitDefaultsRotatorImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::rlbot::api::_Rotator_default_instance_;
    new (ptr) ::rlbot::api::Rotator();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rlbot::api::Rotator::InitAsDefaultInstance();
}

void InitDefaultsRotator() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRotatorImpl);
}

void InitDefaultsTouchImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_5fdata_2eproto::InitDefaultsVector3();
  {
    void* ptr = &::rlbot::api::_Touch_default_instance_;
    new (ptr) ::rlbot::api::Touch();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rlbot::api::Touch::InitAsDefaultInstance();
}

void InitDefaultsTouch() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTouchImpl);
}

void InitDefaultsScoreInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::rlbot::api::_ScoreInfo_default_instance_;
    new (ptr) ::rlbot::api::ScoreInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rlbot::api::ScoreInfo::InitAsDefaultInstance();
}

void InitDefaultsScoreInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsScoreInfoImpl);
}

void InitDefaultsPlayerInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_5fdata_2eproto::InitDefaultsVector3();
  protobuf_game_5fdata_2eproto::InitDefaultsRotator();
  protobuf_game_5fdata_2eproto::InitDefaultsScoreInfo();
  {
    void* ptr = &::rlbot::api::_PlayerInfo_default_instance_;
    new (ptr) ::rlbot::api::PlayerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rlbot::api::PlayerInfo::InitAsDefaultInstance();
}

void InitDefaultsPlayerInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerInfoImpl);
}

void InitDefaultsBallInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_5fdata_2eproto::InitDefaultsVector3();
  protobuf_game_5fdata_2eproto::InitDefaultsRotator();
  protobuf_game_5fdata_2eproto::InitDefaultsTouch();
  {
    void* ptr = &::rlbot::api::_BallInfo_default_instance_;
    new (ptr) ::rlbot::api::BallInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rlbot::api::BallInfo::InitAsDefaultInstance();
}

void InitDefaultsBallInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBallInfoImpl);
}

void InitDefaultsBoostInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_5fdata_2eproto::InitDefaultsVector3();
  {
    void* ptr = &::rlbot::api::_BoostInfo_default_instance_;
    new (ptr) ::rlbot::api::BoostInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rlbot::api::BoostInfo::InitAsDefaultInstance();
}

void InitDefaultsBoostInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBoostInfoImpl);
}

void InitDefaultsGameInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::rlbot::api::_GameInfo_default_instance_;
    new (ptr) ::rlbot::api::GameInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rlbot::api::GameInfo::InitAsDefaultInstance();
}

void InitDefaultsGameInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameInfoImpl);
}

void InitDefaultsGameTickPacketImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_5fdata_2eproto::InitDefaultsPlayerInfo();
  protobuf_game_5fdata_2eproto::InitDefaultsBoostInfo();
  protobuf_game_5fdata_2eproto::InitDefaultsBallInfo();
  protobuf_game_5fdata_2eproto::InitDefaultsGameInfo();
  {
    void* ptr = &::rlbot::api::_GameTickPacket_default_instance_;
    new (ptr) ::rlbot::api::GameTickPacket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rlbot::api::GameTickPacket::InitAsDefaultInstance();
}

void InitDefaultsGameTickPacket() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameTickPacketImpl);
}

::google::protobuf::Metadata file_level_metadata[10];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::ControllerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::ControllerState, throttle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::ControllerState, steer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::ControllerState, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::ControllerState, yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::ControllerState, roll_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::ControllerState, jump_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::ControllerState, boost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::ControllerState, handbrake_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::Vector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::Vector3, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::Vector3, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::Vector3, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::Rotator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::Rotator, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::Rotator, yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::Rotator, roll_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::Touch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::Touch, player_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::Touch, game_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::Touch, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::Touch, normal_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::ScoreInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::ScoreInfo, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::ScoreInfo, goals_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::ScoreInfo, own_goals_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::ScoreInfo, assists_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::ScoreInfo, saves_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::ScoreInfo, shots_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::ScoreInfo, demolitions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::PlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::PlayerInfo, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::PlayerInfo, rotation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::PlayerInfo, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::PlayerInfo, angular_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::PlayerInfo, score_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::PlayerInfo, is_demolished_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::PlayerInfo, is_midair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::PlayerInfo, is_supersonic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::PlayerInfo, is_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::PlayerInfo, jumped_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::PlayerInfo, double_jumped_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::PlayerInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::PlayerInfo, team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::PlayerInfo, boost_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::BallInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::BallInfo, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::BallInfo, rotation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::BallInfo, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::BallInfo, angular_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::BallInfo, acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::BallInfo, latest_touch_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::BoostInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::BoostInfo, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::BoostInfo, is_active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::BoostInfo, timer_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::GameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::GameInfo, seconds_elapsed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::GameInfo, game_time_remaining_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::GameInfo, is_overtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::GameInfo, is_unlimited_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::GameInfo, is_round_active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::GameInfo, is_kickoff_pause_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::GameInfo, is_match_ended_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::GameTickPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::GameTickPacket, players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::GameTickPacket, player_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::GameTickPacket, boost_pads_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::GameTickPacket, ball_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rlbot::api::GameTickPacket, game_info_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::rlbot::api::ControllerState)},
  { 13, -1, sizeof(::rlbot::api::Vector3)},
  { 21, -1, sizeof(::rlbot::api::Rotator)},
  { 29, -1, sizeof(::rlbot::api::Touch)},
  { 38, -1, sizeof(::rlbot::api::ScoreInfo)},
  { 50, -1, sizeof(::rlbot::api::PlayerInfo)},
  { 69, -1, sizeof(::rlbot::api::BallInfo)},
  { 80, -1, sizeof(::rlbot::api::BoostInfo)},
  { 88, -1, sizeof(::rlbot::api::GameInfo)},
  { 100, -1, sizeof(::rlbot::api::GameTickPacket)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::rlbot::api::_ControllerState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::rlbot::api::_Vector3_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::rlbot::api::_Rotator_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::rlbot::api::_Touch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::rlbot::api::_ScoreInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::rlbot::api::_PlayerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::rlbot::api::_BallInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::rlbot::api::_BoostInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::rlbot::api::_GameInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::rlbot::api::_GameTickPacket_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "game_data.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017game_data.proto\022\trlbot.api\"\214\001\n\017Control"
      "lerState\022\020\n\010throttle\030\001 \001(\002\022\r\n\005steer\030\002 \001("
      "\002\022\r\n\005pitch\030\003 \001(\002\022\013\n\003yaw\030\004 \001(\002\022\014\n\004roll\030\005 "
      "\001(\002\022\014\n\004jump\030\006 \001(\010\022\r\n\005boost\030\007 \001(\010\022\021\n\thand"
      "brake\030\010 \001(\010\"*\n\007Vector3\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002"
      " \001(\002\022\t\n\001z\030\003 \001(\002\"3\n\007Rotator\022\r\n\005pitch\030\001 \001("
      "\002\022\013\n\003yaw\030\002 \001(\002\022\014\n\004roll\030\003 \001(\002\"|\n\005Touch\022\023\n"
      "\013player_name\030\001 \001(\t\022\024\n\014game_seconds\030\002 \001(\002"
      "\022$\n\010location\030\003 \001(\0132\022.rlbot.api.Vector3\022\""
      "\n\006normal\030\004 \001(\0132\022.rlbot.api.Vector3\"\200\001\n\tS"
      "coreInfo\022\r\n\005score\030\001 \001(\005\022\r\n\005goals\030\002 \001(\005\022\021"
      "\n\town_goals\030\003 \001(\005\022\017\n\007assists\030\004 \001(\005\022\r\n\005sa"
      "ves\030\005 \001(\005\022\r\n\005shots\030\006 \001(\005\022\023\n\013demolitions\030"
      "\007 \001(\005\"\371\002\n\nPlayerInfo\022$\n\010location\030\001 \001(\0132\022"
      ".rlbot.api.Vector3\022$\n\010rotation\030\002 \001(\0132\022.r"
      "lbot.api.Rotator\022$\n\010velocity\030\003 \001(\0132\022.rlb"
      "ot.api.Vector3\022,\n\020angular_velocity\030\004 \001(\013"
      "2\022.rlbot.api.Vector3\022(\n\nscore_info\030\005 \001(\013"
      "2\024.rlbot.api.ScoreInfo\022\025\n\ris_demolished\030"
      "\006 \001(\010\022\021\n\tis_midair\030\007 \001(\010\022\025\n\ris_supersoni"
      "c\030\010 \001(\010\022\016\n\006is_bot\030\t \001(\010\022\016\n\006jumped\030\n \001(\010\022"
      "\025\n\rdouble_jumped\030\013 \001(\010\022\014\n\004name\030\014 \001(\t\022\014\n\004"
      "team\030\r \001(\005\022\r\n\005boost\030\016 \001(\005\"\374\001\n\010BallInfo\022$"
      "\n\010location\030\001 \001(\0132\022.rlbot.api.Vector3\022$\n\010"
      "rotation\030\002 \001(\0132\022.rlbot.api.Rotator\022$\n\010ve"
      "locity\030\003 \001(\0132\022.rlbot.api.Vector3\022,\n\020angu"
      "lar_velocity\030\004 \001(\0132\022.rlbot.api.Vector3\022("
      "\n\014acceleration\030\005 \001(\0132\022.rlbot.api.Vector3"
      "\022&\n\014latest_touch\030\006 \001(\0132\020.rlbot.api.Touch"
      "\"S\n\tBoostInfo\022$\n\010location\030\001 \001(\0132\022.rlbot."
      "api.Vector3\022\021\n\tis_active\030\002 \001(\010\022\r\n\005timer\030"
      "\003 \001(\005\"\273\001\n\010GameInfo\022\027\n\017seconds_elapsed\030\001 "
      "\001(\002\022\033\n\023game_time_remaining\030\002 \001(\002\022\023\n\013is_o"
      "vertime\030\003 \001(\010\022\031\n\021is_unlimited_time\030\004 \001(\010"
      "\022\027\n\017is_round_active\030\005 \001(\010\022\030\n\020is_kickoff_"
      "pause\030\006 \001(\010\022\026\n\016is_match_ended\030\007 \001(\010\"\303\001\n\016"
      "GameTickPacket\022&\n\007players\030\001 \003(\0132\025.rlbot."
      "api.PlayerInfo\022\024\n\014player_index\030\002 \001(\005\022(\n\n"
      "boost_pads\030\003 \003(\0132\024.rlbot.api.BoostInfo\022!"
      "\n\004ball\030\004 \001(\0132\023.rlbot.api.BallInfo\022&\n\tgam"
      "e_info\030\005 \001(\0132\023.rlbot.api.GameInfo2T\n\003Bot"
      "\022M\n\022GetControllerState\022\031.rlbot.api.GameT"
      "ickPacket\032\032.rlbot.api.ControllerState\"\000b"
      "\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1727);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_data.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_game_5fdata_2eproto
namespace rlbot {
namespace api {

// ===================================================================

void ControllerState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControllerState::kThrottleFieldNumber;
const int ControllerState::kSteerFieldNumber;
const int ControllerState::kPitchFieldNumber;
const int ControllerState::kYawFieldNumber;
const int ControllerState::kRollFieldNumber;
const int ControllerState::kJumpFieldNumber;
const int ControllerState::kBoostFieldNumber;
const int ControllerState::kHandbrakeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControllerState::ControllerState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_5fdata_2eproto::InitDefaultsControllerState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:rlbot.api.ControllerState)
}
ControllerState::ControllerState(const ControllerState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&throttle_, &from.throttle_,
    static_cast<size_t>(reinterpret_cast<char*>(&handbrake_) -
    reinterpret_cast<char*>(&throttle_)) + sizeof(handbrake_));
  // @@protoc_insertion_point(copy_constructor:rlbot.api.ControllerState)
}

void ControllerState::SharedCtor() {
  ::memset(&throttle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&handbrake_) -
      reinterpret_cast<char*>(&throttle_)) + sizeof(handbrake_));
  _cached_size_ = 0;
}

ControllerState::~ControllerState() {
  // @@protoc_insertion_point(destructor:rlbot.api.ControllerState)
  SharedDtor();
}

void ControllerState::SharedDtor() {
}

void ControllerState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControllerState::descriptor() {
  ::protobuf_game_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControllerState& ControllerState::default_instance() {
  ::protobuf_game_5fdata_2eproto::InitDefaultsControllerState();
  return *internal_default_instance();
}

ControllerState* ControllerState::New(::google::protobuf::Arena* arena) const {
  ControllerState* n = new ControllerState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ControllerState::Clear() {
// @@protoc_insertion_point(message_clear_start:rlbot.api.ControllerState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&throttle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&handbrake_) -
      reinterpret_cast<char*>(&throttle_)) + sizeof(handbrake_));
  _internal_metadata_.Clear();
}

bool ControllerState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rlbot.api.ControllerState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float throttle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &throttle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float steer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pitch = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float roll = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool jump = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &jump_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool boost = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool handbrake = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &handbrake_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rlbot.api.ControllerState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rlbot.api.ControllerState)
  return false;
#undef DO_
}

void ControllerState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rlbot.api.ControllerState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float throttle = 1;
  if (this->throttle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->throttle(), output);
  }

  // float steer = 2;
  if (this->steer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->steer(), output);
  }

  // float pitch = 3;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pitch(), output);
  }

  // float yaw = 4;
  if (this->yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->yaw(), output);
  }

  // float roll = 5;
  if (this->roll() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->roll(), output);
  }

  // bool jump = 6;
  if (this->jump() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->jump(), output);
  }

  // bool boost = 7;
  if (this->boost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->boost(), output);
  }

  // bool handbrake = 8;
  if (this->handbrake() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->handbrake(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:rlbot.api.ControllerState)
}

::google::protobuf::uint8* ControllerState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rlbot.api.ControllerState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float throttle = 1;
  if (this->throttle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->throttle(), target);
  }

  // float steer = 2;
  if (this->steer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->steer(), target);
  }

  // float pitch = 3;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pitch(), target);
  }

  // float yaw = 4;
  if (this->yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->yaw(), target);
  }

  // float roll = 5;
  if (this->roll() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->roll(), target);
  }

  // bool jump = 6;
  if (this->jump() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->jump(), target);
  }

  // bool boost = 7;
  if (this->boost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->boost(), target);
  }

  // bool handbrake = 8;
  if (this->handbrake() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->handbrake(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rlbot.api.ControllerState)
  return target;
}

size_t ControllerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rlbot.api.ControllerState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float throttle = 1;
  if (this->throttle() != 0) {
    total_size += 1 + 4;
  }

  // float steer = 2;
  if (this->steer() != 0) {
    total_size += 1 + 4;
  }

  // float pitch = 3;
  if (this->pitch() != 0) {
    total_size += 1 + 4;
  }

  // float yaw = 4;
  if (this->yaw() != 0) {
    total_size += 1 + 4;
  }

  // float roll = 5;
  if (this->roll() != 0) {
    total_size += 1 + 4;
  }

  // bool jump = 6;
  if (this->jump() != 0) {
    total_size += 1 + 1;
  }

  // bool boost = 7;
  if (this->boost() != 0) {
    total_size += 1 + 1;
  }

  // bool handbrake = 8;
  if (this->handbrake() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControllerState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rlbot.api.ControllerState)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControllerState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rlbot.api.ControllerState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rlbot.api.ControllerState)
    MergeFrom(*source);
  }
}

void ControllerState::MergeFrom(const ControllerState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rlbot.api.ControllerState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.throttle() != 0) {
    set_throttle(from.throttle());
  }
  if (from.steer() != 0) {
    set_steer(from.steer());
  }
  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
  if (from.yaw() != 0) {
    set_yaw(from.yaw());
  }
  if (from.roll() != 0) {
    set_roll(from.roll());
  }
  if (from.jump() != 0) {
    set_jump(from.jump());
  }
  if (from.boost() != 0) {
    set_boost(from.boost());
  }
  if (from.handbrake() != 0) {
    set_handbrake(from.handbrake());
  }
}

void ControllerState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rlbot.api.ControllerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerState::CopyFrom(const ControllerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rlbot.api.ControllerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerState::IsInitialized() const {
  return true;
}

void ControllerState::Swap(ControllerState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControllerState::InternalSwap(ControllerState* other) {
  using std::swap;
  swap(throttle_, other->throttle_);
  swap(steer_, other->steer_);
  swap(pitch_, other->pitch_);
  swap(yaw_, other->yaw_);
  swap(roll_, other->roll_);
  swap(jump_, other->jump_);
  swap(boost_, other->boost_);
  swap(handbrake_, other->handbrake_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ControllerState::GetMetadata() const {
  protobuf_game_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Vector3::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector3::kXFieldNumber;
const int Vector3::kYFieldNumber;
const int Vector3::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector3::Vector3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_5fdata_2eproto::InitDefaultsVector3();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:rlbot.api.Vector3)
}
Vector3::Vector3(const Vector3& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:rlbot.api.Vector3)
}

void Vector3::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _cached_size_ = 0;
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:rlbot.api.Vector3)
  SharedDtor();
}

void Vector3::SharedDtor() {
}

void Vector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3::descriptor() {
  ::protobuf_game_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vector3& Vector3::default_instance() {
  ::protobuf_game_5fdata_2eproto::InitDefaultsVector3();
  return *internal_default_instance();
}

Vector3* Vector3::New(::google::protobuf::Arena* arena) const {
  Vector3* n = new Vector3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:rlbot.api.Vector3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

bool Vector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rlbot.api.Vector3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rlbot.api.Vector3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rlbot.api.Vector3)
  return false;
#undef DO_
}

void Vector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rlbot.api.Vector3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:rlbot.api.Vector3)
}

::google::protobuf::uint8* Vector3::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rlbot.api.Vector3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rlbot.api.Vector3)
  return target;
}

size_t Vector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rlbot.api.Vector3)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rlbot.api.Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector3* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector3>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rlbot.api.Vector3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rlbot.api.Vector3)
    MergeFrom(*source);
  }
}

void Vector3::MergeFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rlbot.api.Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Vector3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rlbot.api.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rlbot.api.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {
  return true;
}

void Vector3::Swap(Vector3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector3::InternalSwap(Vector3* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector3::GetMetadata() const {
  protobuf_game_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Rotator::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rotator::kPitchFieldNumber;
const int Rotator::kYawFieldNumber;
const int Rotator::kRollFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rotator::Rotator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_5fdata_2eproto::InitDefaultsRotator();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:rlbot.api.Rotator)
}
Rotator::Rotator(const Rotator& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pitch_, &from.pitch_,
    static_cast<size_t>(reinterpret_cast<char*>(&roll_) -
    reinterpret_cast<char*>(&pitch_)) + sizeof(roll_));
  // @@protoc_insertion_point(copy_constructor:rlbot.api.Rotator)
}

void Rotator::SharedCtor() {
  ::memset(&pitch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roll_) -
      reinterpret_cast<char*>(&pitch_)) + sizeof(roll_));
  _cached_size_ = 0;
}

Rotator::~Rotator() {
  // @@protoc_insertion_point(destructor:rlbot.api.Rotator)
  SharedDtor();
}

void Rotator::SharedDtor() {
}

void Rotator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rotator::descriptor() {
  ::protobuf_game_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Rotator& Rotator::default_instance() {
  ::protobuf_game_5fdata_2eproto::InitDefaultsRotator();
  return *internal_default_instance();
}

Rotator* Rotator::New(::google::protobuf::Arena* arena) const {
  Rotator* n = new Rotator;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rotator::Clear() {
// @@protoc_insertion_point(message_clear_start:rlbot.api.Rotator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pitch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roll_) -
      reinterpret_cast<char*>(&pitch_)) + sizeof(roll_));
  _internal_metadata_.Clear();
}

bool Rotator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rlbot.api.Rotator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float pitch = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float roll = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rlbot.api.Rotator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rlbot.api.Rotator)
  return false;
#undef DO_
}

void Rotator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rlbot.api.Rotator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float pitch = 1;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->pitch(), output);
  }

  // float yaw = 2;
  if (this->yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->yaw(), output);
  }

  // float roll = 3;
  if (this->roll() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->roll(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:rlbot.api.Rotator)
}

::google::protobuf::uint8* Rotator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rlbot.api.Rotator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float pitch = 1;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->pitch(), target);
  }

  // float yaw = 2;
  if (this->yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->yaw(), target);
  }

  // float roll = 3;
  if (this->roll() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->roll(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rlbot.api.Rotator)
  return target;
}

size_t Rotator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rlbot.api.Rotator)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float pitch = 1;
  if (this->pitch() != 0) {
    total_size += 1 + 4;
  }

  // float yaw = 2;
  if (this->yaw() != 0) {
    total_size += 1 + 4;
  }

  // float roll = 3;
  if (this->roll() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rotator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rlbot.api.Rotator)
  GOOGLE_DCHECK_NE(&from, this);
  const Rotator* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Rotator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rlbot.api.Rotator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rlbot.api.Rotator)
    MergeFrom(*source);
  }
}

void Rotator::MergeFrom(const Rotator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rlbot.api.Rotator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
  if (from.yaw() != 0) {
    set_yaw(from.yaw());
  }
  if (from.roll() != 0) {
    set_roll(from.roll());
  }
}

void Rotator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rlbot.api.Rotator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rotator::CopyFrom(const Rotator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rlbot.api.Rotator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rotator::IsInitialized() const {
  return true;
}

void Rotator::Swap(Rotator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rotator::InternalSwap(Rotator* other) {
  using std::swap;
  swap(pitch_, other->pitch_);
  swap(yaw_, other->yaw_);
  swap(roll_, other->roll_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Rotator::GetMetadata() const {
  protobuf_game_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Touch::InitAsDefaultInstance() {
  ::rlbot::api::_Touch_default_instance_._instance.get_mutable()->location_ = const_cast< ::rlbot::api::Vector3*>(
      ::rlbot::api::Vector3::internal_default_instance());
  ::rlbot::api::_Touch_default_instance_._instance.get_mutable()->normal_ = const_cast< ::rlbot::api::Vector3*>(
      ::rlbot::api::Vector3::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Touch::kPlayerNameFieldNumber;
const int Touch::kGameSecondsFieldNumber;
const int Touch::kLocationFieldNumber;
const int Touch::kNormalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Touch::Touch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_5fdata_2eproto::InitDefaultsTouch();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:rlbot.api.Touch)
}
Touch::Touch(const Touch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.player_name().size() > 0) {
    player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
  }
  if (from.has_location()) {
    location_ = new ::rlbot::api::Vector3(*from.location_);
  } else {
    location_ = NULL;
  }
  if (from.has_normal()) {
    normal_ = new ::rlbot::api::Vector3(*from.normal_);
  } else {
    normal_ = NULL;
  }
  game_seconds_ = from.game_seconds_;
  // @@protoc_insertion_point(copy_constructor:rlbot.api.Touch)
}

void Touch::SharedCtor() {
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_seconds_) -
      reinterpret_cast<char*>(&location_)) + sizeof(game_seconds_));
  _cached_size_ = 0;
}

Touch::~Touch() {
  // @@protoc_insertion_point(destructor:rlbot.api.Touch)
  SharedDtor();
}

void Touch::SharedDtor() {
  player_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete normal_;
}

void Touch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Touch::descriptor() {
  ::protobuf_game_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Touch& Touch::default_instance() {
  ::protobuf_game_5fdata_2eproto::InitDefaultsTouch();
  return *internal_default_instance();
}

Touch* Touch::New(::google::protobuf::Arena* arena) const {
  Touch* n = new Touch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Touch::Clear() {
// @@protoc_insertion_point(message_clear_start:rlbot.api.Touch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
  if (GetArenaNoVirtual() == NULL && normal_ != NULL) {
    delete normal_;
  }
  normal_ = NULL;
  game_seconds_ = 0;
  _internal_metadata_.Clear();
}

bool Touch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rlbot.api.Touch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string player_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->player_name().data(), static_cast<int>(this->player_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rlbot.api.Touch.player_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float game_seconds = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &game_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .rlbot.api.Vector3 location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .rlbot.api.Vector3 normal = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_normal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rlbot.api.Touch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rlbot.api.Touch)
  return false;
#undef DO_
}

void Touch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rlbot.api.Touch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string player_name = 1;
  if (this->player_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->player_name().data(), static_cast<int>(this->player_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rlbot.api.Touch.player_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->player_name(), output);
  }

  // float game_seconds = 2;
  if (this->game_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->game_seconds(), output);
  }

  // .rlbot.api.Vector3 location = 3;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->location_, output);
  }

  // .rlbot.api.Vector3 normal = 4;
  if (this->has_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->normal_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:rlbot.api.Touch)
}

::google::protobuf::uint8* Touch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rlbot.api.Touch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string player_name = 1;
  if (this->player_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->player_name().data(), static_cast<int>(this->player_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rlbot.api.Touch.player_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->player_name(), target);
  }

  // float game_seconds = 2;
  if (this->game_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->game_seconds(), target);
  }

  // .rlbot.api.Vector3 location = 3;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->location_, deterministic, target);
  }

  // .rlbot.api.Vector3 normal = 4;
  if (this->has_normal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->normal_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rlbot.api.Touch)
  return target;
}

size_t Touch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rlbot.api.Touch)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string player_name = 1;
  if (this->player_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->player_name());
  }

  // .rlbot.api.Vector3 location = 3;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->location_);
  }

  // .rlbot.api.Vector3 normal = 4;
  if (this->has_normal()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->normal_);
  }

  // float game_seconds = 2;
  if (this->game_seconds() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Touch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rlbot.api.Touch)
  GOOGLE_DCHECK_NE(&from, this);
  const Touch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Touch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rlbot.api.Touch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rlbot.api.Touch)
    MergeFrom(*source);
  }
}

void Touch::MergeFrom(const Touch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rlbot.api.Touch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_name().size() > 0) {

    player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
  }
  if (from.has_location()) {
    mutable_location()->::rlbot::api::Vector3::MergeFrom(from.location());
  }
  if (from.has_normal()) {
    mutable_normal()->::rlbot::api::Vector3::MergeFrom(from.normal());
  }
  if (from.game_seconds() != 0) {
    set_game_seconds(from.game_seconds());
  }
}

void Touch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rlbot.api.Touch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Touch::CopyFrom(const Touch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rlbot.api.Touch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Touch::IsInitialized() const {
  return true;
}

void Touch::Swap(Touch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Touch::InternalSwap(Touch* other) {
  using std::swap;
  player_name_.Swap(&other->player_name_);
  swap(location_, other->location_);
  swap(normal_, other->normal_);
  swap(game_seconds_, other->game_seconds_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Touch::GetMetadata() const {
  protobuf_game_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ScoreInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScoreInfo::kScoreFieldNumber;
const int ScoreInfo::kGoalsFieldNumber;
const int ScoreInfo::kOwnGoalsFieldNumber;
const int ScoreInfo::kAssistsFieldNumber;
const int ScoreInfo::kSavesFieldNumber;
const int ScoreInfo::kShotsFieldNumber;
const int ScoreInfo::kDemolitionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScoreInfo::ScoreInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_5fdata_2eproto::InitDefaultsScoreInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:rlbot.api.ScoreInfo)
}
ScoreInfo::ScoreInfo(const ScoreInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&demolitions_) -
    reinterpret_cast<char*>(&score_)) + sizeof(demolitions_));
  // @@protoc_insertion_point(copy_constructor:rlbot.api.ScoreInfo)
}

void ScoreInfo::SharedCtor() {
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&demolitions_) -
      reinterpret_cast<char*>(&score_)) + sizeof(demolitions_));
  _cached_size_ = 0;
}

ScoreInfo::~ScoreInfo() {
  // @@protoc_insertion_point(destructor:rlbot.api.ScoreInfo)
  SharedDtor();
}

void ScoreInfo::SharedDtor() {
}

void ScoreInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScoreInfo::descriptor() {
  ::protobuf_game_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScoreInfo& ScoreInfo::default_instance() {
  ::protobuf_game_5fdata_2eproto::InitDefaultsScoreInfo();
  return *internal_default_instance();
}

ScoreInfo* ScoreInfo::New(::google::protobuf::Arena* arena) const {
  ScoreInfo* n = new ScoreInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScoreInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rlbot.api.ScoreInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&demolitions_) -
      reinterpret_cast<char*>(&score_)) + sizeof(demolitions_));
  _internal_metadata_.Clear();
}

bool ScoreInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rlbot.api.ScoreInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 score = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 goals = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goals_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 own_goals = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &own_goals_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 assists = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &assists_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 saves = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &saves_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 shots = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shots_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 demolitions = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &demolitions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rlbot.api.ScoreInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rlbot.api.ScoreInfo)
  return false;
#undef DO_
}

void ScoreInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rlbot.api.ScoreInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 score = 1;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->score(), output);
  }

  // int32 goals = 2;
  if (this->goals() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->goals(), output);
  }

  // int32 own_goals = 3;
  if (this->own_goals() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->own_goals(), output);
  }

  // int32 assists = 4;
  if (this->assists() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->assists(), output);
  }

  // int32 saves = 5;
  if (this->saves() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->saves(), output);
  }

  // int32 shots = 6;
  if (this->shots() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->shots(), output);
  }

  // int32 demolitions = 7;
  if (this->demolitions() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->demolitions(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:rlbot.api.ScoreInfo)
}

::google::protobuf::uint8* ScoreInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rlbot.api.ScoreInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 score = 1;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->score(), target);
  }

  // int32 goals = 2;
  if (this->goals() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->goals(), target);
  }

  // int32 own_goals = 3;
  if (this->own_goals() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->own_goals(), target);
  }

  // int32 assists = 4;
  if (this->assists() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->assists(), target);
  }

  // int32 saves = 5;
  if (this->saves() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->saves(), target);
  }

  // int32 shots = 6;
  if (this->shots() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->shots(), target);
  }

  // int32 demolitions = 7;
  if (this->demolitions() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->demolitions(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rlbot.api.ScoreInfo)
  return target;
}

size_t ScoreInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rlbot.api.ScoreInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 score = 1;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->score());
  }

  // int32 goals = 2;
  if (this->goals() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goals());
  }

  // int32 own_goals = 3;
  if (this->own_goals() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->own_goals());
  }

  // int32 assists = 4;
  if (this->assists() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->assists());
  }

  // int32 saves = 5;
  if (this->saves() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->saves());
  }

  // int32 shots = 6;
  if (this->shots() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->shots());
  }

  // int32 demolitions = 7;
  if (this->demolitions() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->demolitions());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScoreInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rlbot.api.ScoreInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ScoreInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScoreInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rlbot.api.ScoreInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rlbot.api.ScoreInfo)
    MergeFrom(*source);
  }
}

void ScoreInfo::MergeFrom(const ScoreInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rlbot.api.ScoreInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.score() != 0) {
    set_score(from.score());
  }
  if (from.goals() != 0) {
    set_goals(from.goals());
  }
  if (from.own_goals() != 0) {
    set_own_goals(from.own_goals());
  }
  if (from.assists() != 0) {
    set_assists(from.assists());
  }
  if (from.saves() != 0) {
    set_saves(from.saves());
  }
  if (from.shots() != 0) {
    set_shots(from.shots());
  }
  if (from.demolitions() != 0) {
    set_demolitions(from.demolitions());
  }
}

void ScoreInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rlbot.api.ScoreInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScoreInfo::CopyFrom(const ScoreInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rlbot.api.ScoreInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreInfo::IsInitialized() const {
  return true;
}

void ScoreInfo::Swap(ScoreInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScoreInfo::InternalSwap(ScoreInfo* other) {
  using std::swap;
  swap(score_, other->score_);
  swap(goals_, other->goals_);
  swap(own_goals_, other->own_goals_);
  swap(assists_, other->assists_);
  swap(saves_, other->saves_);
  swap(shots_, other->shots_);
  swap(demolitions_, other->demolitions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScoreInfo::GetMetadata() const {
  protobuf_game_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerInfo::InitAsDefaultInstance() {
  ::rlbot::api::_PlayerInfo_default_instance_._instance.get_mutable()->location_ = const_cast< ::rlbot::api::Vector3*>(
      ::rlbot::api::Vector3::internal_default_instance());
  ::rlbot::api::_PlayerInfo_default_instance_._instance.get_mutable()->rotation_ = const_cast< ::rlbot::api::Rotator*>(
      ::rlbot::api::Rotator::internal_default_instance());
  ::rlbot::api::_PlayerInfo_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::rlbot::api::Vector3*>(
      ::rlbot::api::Vector3::internal_default_instance());
  ::rlbot::api::_PlayerInfo_default_instance_._instance.get_mutable()->angular_velocity_ = const_cast< ::rlbot::api::Vector3*>(
      ::rlbot::api::Vector3::internal_default_instance());
  ::rlbot::api::_PlayerInfo_default_instance_._instance.get_mutable()->score_info_ = const_cast< ::rlbot::api::ScoreInfo*>(
      ::rlbot::api::ScoreInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerInfo::kLocationFieldNumber;
const int PlayerInfo::kRotationFieldNumber;
const int PlayerInfo::kVelocityFieldNumber;
const int PlayerInfo::kAngularVelocityFieldNumber;
const int PlayerInfo::kScoreInfoFieldNumber;
const int PlayerInfo::kIsDemolishedFieldNumber;
const int PlayerInfo::kIsMidairFieldNumber;
const int PlayerInfo::kIsSupersonicFieldNumber;
const int PlayerInfo::kIsBotFieldNumber;
const int PlayerInfo::kJumpedFieldNumber;
const int PlayerInfo::kDoubleJumpedFieldNumber;
const int PlayerInfo::kNameFieldNumber;
const int PlayerInfo::kTeamFieldNumber;
const int PlayerInfo::kBoostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerInfo::PlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_5fdata_2eproto::InitDefaultsPlayerInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:rlbot.api.PlayerInfo)
}
PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_location()) {
    location_ = new ::rlbot::api::Vector3(*from.location_);
  } else {
    location_ = NULL;
  }
  if (from.has_rotation()) {
    rotation_ = new ::rlbot::api::Rotator(*from.rotation_);
  } else {
    rotation_ = NULL;
  }
  if (from.has_velocity()) {
    velocity_ = new ::rlbot::api::Vector3(*from.velocity_);
  } else {
    velocity_ = NULL;
  }
  if (from.has_angular_velocity()) {
    angular_velocity_ = new ::rlbot::api::Vector3(*from.angular_velocity_);
  } else {
    angular_velocity_ = NULL;
  }
  if (from.has_score_info()) {
    score_info_ = new ::rlbot::api::ScoreInfo(*from.score_info_);
  } else {
    score_info_ = NULL;
  }
  ::memcpy(&is_demolished_, &from.is_demolished_,
    static_cast<size_t>(reinterpret_cast<char*>(&boost_) -
    reinterpret_cast<char*>(&is_demolished_)) + sizeof(boost_));
  // @@protoc_insertion_point(copy_constructor:rlbot.api.PlayerInfo)
}

void PlayerInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&boost_) -
      reinterpret_cast<char*>(&location_)) + sizeof(boost_));
  _cached_size_ = 0;
}

PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:rlbot.api.PlayerInfo)
  SharedDtor();
}

void PlayerInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete rotation_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete angular_velocity_;
  if (this != internal_default_instance()) delete score_info_;
}

void PlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfo::descriptor() {
  ::protobuf_game_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerInfo& PlayerInfo::default_instance() {
  ::protobuf_game_5fdata_2eproto::InitDefaultsPlayerInfo();
  return *internal_default_instance();
}

PlayerInfo* PlayerInfo::New(::google::protobuf::Arena* arena) const {
  PlayerInfo* n = new PlayerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rlbot.api.PlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) {
    delete rotation_;
  }
  rotation_ = NULL;
  if (GetArenaNoVirtual() == NULL && velocity_ != NULL) {
    delete velocity_;
  }
  velocity_ = NULL;
  if (GetArenaNoVirtual() == NULL && angular_velocity_ != NULL) {
    delete angular_velocity_;
  }
  angular_velocity_ = NULL;
  if (GetArenaNoVirtual() == NULL && score_info_ != NULL) {
    delete score_info_;
  }
  score_info_ = NULL;
  ::memset(&is_demolished_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&boost_) -
      reinterpret_cast<char*>(&is_demolished_)) + sizeof(boost_));
  _internal_metadata_.Clear();
}

bool PlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rlbot.api.PlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .rlbot.api.Vector3 location = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .rlbot.api.Rotator rotation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .rlbot.api.Vector3 velocity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .rlbot.api.Vector3 angular_velocity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_angular_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .rlbot.api.ScoreInfo score_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_score_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_demolished = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_demolished_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_midair = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_midair_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_supersonic = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_supersonic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_bot = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool jumped = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &jumped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool double_jumped = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &double_jumped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rlbot.api.PlayerInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 team = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 boost = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rlbot.api.PlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rlbot.api.PlayerInfo)
  return false;
#undef DO_
}

void PlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rlbot.api.PlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rlbot.api.Vector3 location = 1;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->location_, output);
  }

  // .rlbot.api.Rotator rotation = 2;
  if (this->has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->rotation_, output);
  }

  // .rlbot.api.Vector3 velocity = 3;
  if (this->has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->velocity_, output);
  }

  // .rlbot.api.Vector3 angular_velocity = 4;
  if (this->has_angular_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->angular_velocity_, output);
  }

  // .rlbot.api.ScoreInfo score_info = 5;
  if (this->has_score_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->score_info_, output);
  }

  // bool is_demolished = 6;
  if (this->is_demolished() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_demolished(), output);
  }

  // bool is_midair = 7;
  if (this->is_midair() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_midair(), output);
  }

  // bool is_supersonic = 8;
  if (this->is_supersonic() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_supersonic(), output);
  }

  // bool is_bot = 9;
  if (this->is_bot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_bot(), output);
  }

  // bool jumped = 10;
  if (this->jumped() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->jumped(), output);
  }

  // bool double_jumped = 11;
  if (this->double_jumped() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->double_jumped(), output);
  }

  // string name = 12;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rlbot.api.PlayerInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->name(), output);
  }

  // int32 team = 13;
  if (this->team() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->team(), output);
  }

  // int32 boost = 14;
  if (this->boost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->boost(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:rlbot.api.PlayerInfo)
}

::google::protobuf::uint8* PlayerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rlbot.api.PlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rlbot.api.Vector3 location = 1;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->location_, deterministic, target);
  }

  // .rlbot.api.Rotator rotation = 2;
  if (this->has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->rotation_, deterministic, target);
  }

  // .rlbot.api.Vector3 velocity = 3;
  if (this->has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->velocity_, deterministic, target);
  }

  // .rlbot.api.Vector3 angular_velocity = 4;
  if (this->has_angular_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->angular_velocity_, deterministic, target);
  }

  // .rlbot.api.ScoreInfo score_info = 5;
  if (this->has_score_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->score_info_, deterministic, target);
  }

  // bool is_demolished = 6;
  if (this->is_demolished() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_demolished(), target);
  }

  // bool is_midair = 7;
  if (this->is_midair() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_midair(), target);
  }

  // bool is_supersonic = 8;
  if (this->is_supersonic() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_supersonic(), target);
  }

  // bool is_bot = 9;
  if (this->is_bot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_bot(), target);
  }

  // bool jumped = 10;
  if (this->jumped() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->jumped(), target);
  }

  // bool double_jumped = 11;
  if (this->double_jumped() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->double_jumped(), target);
  }

  // string name = 12;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rlbot.api.PlayerInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->name(), target);
  }

  // int32 team = 13;
  if (this->team() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->team(), target);
  }

  // int32 boost = 14;
  if (this->boost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->boost(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rlbot.api.PlayerInfo)
  return target;
}

size_t PlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rlbot.api.PlayerInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 12;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .rlbot.api.Vector3 location = 1;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->location_);
  }

  // .rlbot.api.Rotator rotation = 2;
  if (this->has_rotation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rotation_);
  }

  // .rlbot.api.Vector3 velocity = 3;
  if (this->has_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->velocity_);
  }

  // .rlbot.api.Vector3 angular_velocity = 4;
  if (this->has_angular_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->angular_velocity_);
  }

  // .rlbot.api.ScoreInfo score_info = 5;
  if (this->has_score_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->score_info_);
  }

  // bool is_demolished = 6;
  if (this->is_demolished() != 0) {
    total_size += 1 + 1;
  }

  // bool is_midair = 7;
  if (this->is_midair() != 0) {
    total_size += 1 + 1;
  }

  // bool is_supersonic = 8;
  if (this->is_supersonic() != 0) {
    total_size += 1 + 1;
  }

  // bool is_bot = 9;
  if (this->is_bot() != 0) {
    total_size += 1 + 1;
  }

  // bool jumped = 10;
  if (this->jumped() != 0) {
    total_size += 1 + 1;
  }

  // bool double_jumped = 11;
  if (this->double_jumped() != 0) {
    total_size += 1 + 1;
  }

  // int32 team = 13;
  if (this->team() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->team());
  }

  // int32 boost = 14;
  if (this->boost() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->boost());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rlbot.api.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rlbot.api.PlayerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rlbot.api.PlayerInfo)
    MergeFrom(*source);
  }
}

void PlayerInfo::MergeFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rlbot.api.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_location()) {
    mutable_location()->::rlbot::api::Vector3::MergeFrom(from.location());
  }
  if (from.has_rotation()) {
    mutable_rotation()->::rlbot::api::Rotator::MergeFrom(from.rotation());
  }
  if (from.has_velocity()) {
    mutable_velocity()->::rlbot::api::Vector3::MergeFrom(from.velocity());
  }
  if (from.has_angular_velocity()) {
    mutable_angular_velocity()->::rlbot::api::Vector3::MergeFrom(from.angular_velocity());
  }
  if (from.has_score_info()) {
    mutable_score_info()->::rlbot::api::ScoreInfo::MergeFrom(from.score_info());
  }
  if (from.is_demolished() != 0) {
    set_is_demolished(from.is_demolished());
  }
  if (from.is_midair() != 0) {
    set_is_midair(from.is_midair());
  }
  if (from.is_supersonic() != 0) {
    set_is_supersonic(from.is_supersonic());
  }
  if (from.is_bot() != 0) {
    set_is_bot(from.is_bot());
  }
  if (from.jumped() != 0) {
    set_jumped(from.jumped());
  }
  if (from.double_jumped() != 0) {
    set_double_jumped(from.double_jumped());
  }
  if (from.team() != 0) {
    set_team(from.team());
  }
  if (from.boost() != 0) {
    set_boost(from.boost());
  }
}

void PlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rlbot.api.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rlbot.api.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {
  return true;
}

void PlayerInfo::Swap(PlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerInfo::InternalSwap(PlayerInfo* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(location_, other->location_);
  swap(rotation_, other->rotation_);
  swap(velocity_, other->velocity_);
  swap(angular_velocity_, other->angular_velocity_);
  swap(score_info_, other->score_info_);
  swap(is_demolished_, other->is_demolished_);
  swap(is_midair_, other->is_midair_);
  swap(is_supersonic_, other->is_supersonic_);
  swap(is_bot_, other->is_bot_);
  swap(jumped_, other->jumped_);
  swap(double_jumped_, other->double_jumped_);
  swap(team_, other->team_);
  swap(boost_, other->boost_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerInfo::GetMetadata() const {
  protobuf_game_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BallInfo::InitAsDefaultInstance() {
  ::rlbot::api::_BallInfo_default_instance_._instance.get_mutable()->location_ = const_cast< ::rlbot::api::Vector3*>(
      ::rlbot::api::Vector3::internal_default_instance());
  ::rlbot::api::_BallInfo_default_instance_._instance.get_mutable()->rotation_ = const_cast< ::rlbot::api::Rotator*>(
      ::rlbot::api::Rotator::internal_default_instance());
  ::rlbot::api::_BallInfo_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::rlbot::api::Vector3*>(
      ::rlbot::api::Vector3::internal_default_instance());
  ::rlbot::api::_BallInfo_default_instance_._instance.get_mutable()->angular_velocity_ = const_cast< ::rlbot::api::Vector3*>(
      ::rlbot::api::Vector3::internal_default_instance());
  ::rlbot::api::_BallInfo_default_instance_._instance.get_mutable()->acceleration_ = const_cast< ::rlbot::api::Vector3*>(
      ::rlbot::api::Vector3::internal_default_instance());
  ::rlbot::api::_BallInfo_default_instance_._instance.get_mutable()->latest_touch_ = const_cast< ::rlbot::api::Touch*>(
      ::rlbot::api::Touch::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BallInfo::kLocationFieldNumber;
const int BallInfo::kRotationFieldNumber;
const int BallInfo::kVelocityFieldNumber;
const int BallInfo::kAngularVelocityFieldNumber;
const int BallInfo::kAccelerationFieldNumber;
const int BallInfo::kLatestTouchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BallInfo::BallInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_5fdata_2eproto::InitDefaultsBallInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:rlbot.api.BallInfo)
}
BallInfo::BallInfo(const BallInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::rlbot::api::Vector3(*from.location_);
  } else {
    location_ = NULL;
  }
  if (from.has_rotation()) {
    rotation_ = new ::rlbot::api::Rotator(*from.rotation_);
  } else {
    rotation_ = NULL;
  }
  if (from.has_velocity()) {
    velocity_ = new ::rlbot::api::Vector3(*from.velocity_);
  } else {
    velocity_ = NULL;
  }
  if (from.has_angular_velocity()) {
    angular_velocity_ = new ::rlbot::api::Vector3(*from.angular_velocity_);
  } else {
    angular_velocity_ = NULL;
  }
  if (from.has_acceleration()) {
    acceleration_ = new ::rlbot::api::Vector3(*from.acceleration_);
  } else {
    acceleration_ = NULL;
  }
  if (from.has_latest_touch()) {
    latest_touch_ = new ::rlbot::api::Touch(*from.latest_touch_);
  } else {
    latest_touch_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:rlbot.api.BallInfo)
}

void BallInfo::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latest_touch_) -
      reinterpret_cast<char*>(&location_)) + sizeof(latest_touch_));
  _cached_size_ = 0;
}

BallInfo::~BallInfo() {
  // @@protoc_insertion_point(destructor:rlbot.api.BallInfo)
  SharedDtor();
}

void BallInfo::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete rotation_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete angular_velocity_;
  if (this != internal_default_instance()) delete acceleration_;
  if (this != internal_default_instance()) delete latest_touch_;
}

void BallInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BallInfo::descriptor() {
  ::protobuf_game_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BallInfo& BallInfo::default_instance() {
  ::protobuf_game_5fdata_2eproto::InitDefaultsBallInfo();
  return *internal_default_instance();
}

BallInfo* BallInfo::New(::google::protobuf::Arena* arena) const {
  BallInfo* n = new BallInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BallInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rlbot.api.BallInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) {
    delete rotation_;
  }
  rotation_ = NULL;
  if (GetArenaNoVirtual() == NULL && velocity_ != NULL) {
    delete velocity_;
  }
  velocity_ = NULL;
  if (GetArenaNoVirtual() == NULL && angular_velocity_ != NULL) {
    delete angular_velocity_;
  }
  angular_velocity_ = NULL;
  if (GetArenaNoVirtual() == NULL && acceleration_ != NULL) {
    delete acceleration_;
  }
  acceleration_ = NULL;
  if (GetArenaNoVirtual() == NULL && latest_touch_ != NULL) {
    delete latest_touch_;
  }
  latest_touch_ = NULL;
  _internal_metadata_.Clear();
}

bool BallInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rlbot.api.BallInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .rlbot.api.Vector3 location = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .rlbot.api.Rotator rotation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .rlbot.api.Vector3 velocity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .rlbot.api.Vector3 angular_velocity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_angular_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .rlbot.api.Vector3 acceleration = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .rlbot.api.Touch latest_touch = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_latest_touch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rlbot.api.BallInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rlbot.api.BallInfo)
  return false;
#undef DO_
}

void BallInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rlbot.api.BallInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rlbot.api.Vector3 location = 1;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->location_, output);
  }

  // .rlbot.api.Rotator rotation = 2;
  if (this->has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->rotation_, output);
  }

  // .rlbot.api.Vector3 velocity = 3;
  if (this->has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->velocity_, output);
  }

  // .rlbot.api.Vector3 angular_velocity = 4;
  if (this->has_angular_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->angular_velocity_, output);
  }

  // .rlbot.api.Vector3 acceleration = 5;
  if (this->has_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->acceleration_, output);
  }

  // .rlbot.api.Touch latest_touch = 6;
  if (this->has_latest_touch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->latest_touch_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:rlbot.api.BallInfo)
}

::google::protobuf::uint8* BallInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rlbot.api.BallInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rlbot.api.Vector3 location = 1;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->location_, deterministic, target);
  }

  // .rlbot.api.Rotator rotation = 2;
  if (this->has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->rotation_, deterministic, target);
  }

  // .rlbot.api.Vector3 velocity = 3;
  if (this->has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->velocity_, deterministic, target);
  }

  // .rlbot.api.Vector3 angular_velocity = 4;
  if (this->has_angular_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->angular_velocity_, deterministic, target);
  }

  // .rlbot.api.Vector3 acceleration = 5;
  if (this->has_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->acceleration_, deterministic, target);
  }

  // .rlbot.api.Touch latest_touch = 6;
  if (this->has_latest_touch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->latest_touch_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rlbot.api.BallInfo)
  return target;
}

size_t BallInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rlbot.api.BallInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .rlbot.api.Vector3 location = 1;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->location_);
  }

  // .rlbot.api.Rotator rotation = 2;
  if (this->has_rotation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rotation_);
  }

  // .rlbot.api.Vector3 velocity = 3;
  if (this->has_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->velocity_);
  }

  // .rlbot.api.Vector3 angular_velocity = 4;
  if (this->has_angular_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->angular_velocity_);
  }

  // .rlbot.api.Vector3 acceleration = 5;
  if (this->has_acceleration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->acceleration_);
  }

  // .rlbot.api.Touch latest_touch = 6;
  if (this->has_latest_touch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->latest_touch_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BallInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rlbot.api.BallInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BallInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BallInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rlbot.api.BallInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rlbot.api.BallInfo)
    MergeFrom(*source);
  }
}

void BallInfo::MergeFrom(const BallInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rlbot.api.BallInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_location()) {
    mutable_location()->::rlbot::api::Vector3::MergeFrom(from.location());
  }
  if (from.has_rotation()) {
    mutable_rotation()->::rlbot::api::Rotator::MergeFrom(from.rotation());
  }
  if (from.has_velocity()) {
    mutable_velocity()->::rlbot::api::Vector3::MergeFrom(from.velocity());
  }
  if (from.has_angular_velocity()) {
    mutable_angular_velocity()->::rlbot::api::Vector3::MergeFrom(from.angular_velocity());
  }
  if (from.has_acceleration()) {
    mutable_acceleration()->::rlbot::api::Vector3::MergeFrom(from.acceleration());
  }
  if (from.has_latest_touch()) {
    mutable_latest_touch()->::rlbot::api::Touch::MergeFrom(from.latest_touch());
  }
}

void BallInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rlbot.api.BallInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BallInfo::CopyFrom(const BallInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rlbot.api.BallInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BallInfo::IsInitialized() const {
  return true;
}

void BallInfo::Swap(BallInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BallInfo::InternalSwap(BallInfo* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(rotation_, other->rotation_);
  swap(velocity_, other->velocity_);
  swap(angular_velocity_, other->angular_velocity_);
  swap(acceleration_, other->acceleration_);
  swap(latest_touch_, other->latest_touch_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BallInfo::GetMetadata() const {
  protobuf_game_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BoostInfo::InitAsDefaultInstance() {
  ::rlbot::api::_BoostInfo_default_instance_._instance.get_mutable()->location_ = const_cast< ::rlbot::api::Vector3*>(
      ::rlbot::api::Vector3::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoostInfo::kLocationFieldNumber;
const int BoostInfo::kIsActiveFieldNumber;
const int BoostInfo::kTimerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoostInfo::BoostInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_5fdata_2eproto::InitDefaultsBoostInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:rlbot.api.BoostInfo)
}
BoostInfo::BoostInfo(const BoostInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::rlbot::api::Vector3(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&is_active_, &from.is_active_,
    static_cast<size_t>(reinterpret_cast<char*>(&timer_) -
    reinterpret_cast<char*>(&is_active_)) + sizeof(timer_));
  // @@protoc_insertion_point(copy_constructor:rlbot.api.BoostInfo)
}

void BoostInfo::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timer_) -
      reinterpret_cast<char*>(&location_)) + sizeof(timer_));
  _cached_size_ = 0;
}

BoostInfo::~BoostInfo() {
  // @@protoc_insertion_point(destructor:rlbot.api.BoostInfo)
  SharedDtor();
}

void BoostInfo::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
}

void BoostInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoostInfo::descriptor() {
  ::protobuf_game_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BoostInfo& BoostInfo::default_instance() {
  ::protobuf_game_5fdata_2eproto::InitDefaultsBoostInfo();
  return *internal_default_instance();
}

BoostInfo* BoostInfo::New(::google::protobuf::Arena* arena) const {
  BoostInfo* n = new BoostInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BoostInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rlbot.api.BoostInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
  ::memset(&is_active_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timer_) -
      reinterpret_cast<char*>(&is_active_)) + sizeof(timer_));
  _internal_metadata_.Clear();
}

bool BoostInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rlbot.api.BoostInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .rlbot.api.Vector3 location = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_active = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 timer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rlbot.api.BoostInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rlbot.api.BoostInfo)
  return false;
#undef DO_
}

void BoostInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rlbot.api.BoostInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rlbot.api.Vector3 location = 1;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->location_, output);
  }

  // bool is_active = 2;
  if (this->is_active() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_active(), output);
  }

  // int32 timer = 3;
  if (this->timer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->timer(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:rlbot.api.BoostInfo)
}

::google::protobuf::uint8* BoostInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rlbot.api.BoostInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rlbot.api.Vector3 location = 1;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->location_, deterministic, target);
  }

  // bool is_active = 2;
  if (this->is_active() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_active(), target);
  }

  // int32 timer = 3;
  if (this->timer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->timer(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rlbot.api.BoostInfo)
  return target;
}

size_t BoostInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rlbot.api.BoostInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .rlbot.api.Vector3 location = 1;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->location_);
  }

  // bool is_active = 2;
  if (this->is_active() != 0) {
    total_size += 1 + 1;
  }

  // int32 timer = 3;
  if (this->timer() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->timer());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoostInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rlbot.api.BoostInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BoostInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BoostInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rlbot.api.BoostInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rlbot.api.BoostInfo)
    MergeFrom(*source);
  }
}

void BoostInfo::MergeFrom(const BoostInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rlbot.api.BoostInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_location()) {
    mutable_location()->::rlbot::api::Vector3::MergeFrom(from.location());
  }
  if (from.is_active() != 0) {
    set_is_active(from.is_active());
  }
  if (from.timer() != 0) {
    set_timer(from.timer());
  }
}

void BoostInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rlbot.api.BoostInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoostInfo::CopyFrom(const BoostInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rlbot.api.BoostInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoostInfo::IsInitialized() const {
  return true;
}

void BoostInfo::Swap(BoostInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoostInfo::InternalSwap(BoostInfo* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(is_active_, other->is_active_);
  swap(timer_, other->timer_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BoostInfo::GetMetadata() const {
  protobuf_game_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameInfo::kSecondsElapsedFieldNumber;
const int GameInfo::kGameTimeRemainingFieldNumber;
const int GameInfo::kIsOvertimeFieldNumber;
const int GameInfo::kIsUnlimitedTimeFieldNumber;
const int GameInfo::kIsRoundActiveFieldNumber;
const int GameInfo::kIsKickoffPauseFieldNumber;
const int GameInfo::kIsMatchEndedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameInfo::GameInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_5fdata_2eproto::InitDefaultsGameInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:rlbot.api.GameInfo)
}
GameInfo::GameInfo(const GameInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&seconds_elapsed_, &from.seconds_elapsed_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_match_ended_) -
    reinterpret_cast<char*>(&seconds_elapsed_)) + sizeof(is_match_ended_));
  // @@protoc_insertion_point(copy_constructor:rlbot.api.GameInfo)
}

void GameInfo::SharedCtor() {
  ::memset(&seconds_elapsed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_match_ended_) -
      reinterpret_cast<char*>(&seconds_elapsed_)) + sizeof(is_match_ended_));
  _cached_size_ = 0;
}

GameInfo::~GameInfo() {
  // @@protoc_insertion_point(destructor:rlbot.api.GameInfo)
  SharedDtor();
}

void GameInfo::SharedDtor() {
}

void GameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameInfo::descriptor() {
  ::protobuf_game_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameInfo& GameInfo::default_instance() {
  ::protobuf_game_5fdata_2eproto::InitDefaultsGameInfo();
  return *internal_default_instance();
}

GameInfo* GameInfo::New(::google::protobuf::Arena* arena) const {
  GameInfo* n = new GameInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rlbot.api.GameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&seconds_elapsed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_match_ended_) -
      reinterpret_cast<char*>(&seconds_elapsed_)) + sizeof(is_match_ended_));
  _internal_metadata_.Clear();
}

bool GameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rlbot.api.GameInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float seconds_elapsed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &seconds_elapsed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float game_time_remaining = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &game_time_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_overtime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_overtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_unlimited_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_unlimited_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_round_active = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_round_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_kickoff_pause = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_kickoff_pause_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_match_ended = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_match_ended_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rlbot.api.GameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rlbot.api.GameInfo)
  return false;
#undef DO_
}

void GameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rlbot.api.GameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float seconds_elapsed = 1;
  if (this->seconds_elapsed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->seconds_elapsed(), output);
  }

  // float game_time_remaining = 2;
  if (this->game_time_remaining() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->game_time_remaining(), output);
  }

  // bool is_overtime = 3;
  if (this->is_overtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_overtime(), output);
  }

  // bool is_unlimited_time = 4;
  if (this->is_unlimited_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_unlimited_time(), output);
  }

  // bool is_round_active = 5;
  if (this->is_round_active() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_round_active(), output);
  }

  // bool is_kickoff_pause = 6;
  if (this->is_kickoff_pause() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_kickoff_pause(), output);
  }

  // bool is_match_ended = 7;
  if (this->is_match_ended() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_match_ended(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:rlbot.api.GameInfo)
}

::google::protobuf::uint8* GameInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rlbot.api.GameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float seconds_elapsed = 1;
  if (this->seconds_elapsed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->seconds_elapsed(), target);
  }

  // float game_time_remaining = 2;
  if (this->game_time_remaining() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->game_time_remaining(), target);
  }

  // bool is_overtime = 3;
  if (this->is_overtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_overtime(), target);
  }

  // bool is_unlimited_time = 4;
  if (this->is_unlimited_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_unlimited_time(), target);
  }

  // bool is_round_active = 5;
  if (this->is_round_active() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_round_active(), target);
  }

  // bool is_kickoff_pause = 6;
  if (this->is_kickoff_pause() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_kickoff_pause(), target);
  }

  // bool is_match_ended = 7;
  if (this->is_match_ended() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_match_ended(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rlbot.api.GameInfo)
  return target;
}

size_t GameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rlbot.api.GameInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float seconds_elapsed = 1;
  if (this->seconds_elapsed() != 0) {
    total_size += 1 + 4;
  }

  // float game_time_remaining = 2;
  if (this->game_time_remaining() != 0) {
    total_size += 1 + 4;
  }

  // bool is_overtime = 3;
  if (this->is_overtime() != 0) {
    total_size += 1 + 1;
  }

  // bool is_unlimited_time = 4;
  if (this->is_unlimited_time() != 0) {
    total_size += 1 + 1;
  }

  // bool is_round_active = 5;
  if (this->is_round_active() != 0) {
    total_size += 1 + 1;
  }

  // bool is_kickoff_pause = 6;
  if (this->is_kickoff_pause() != 0) {
    total_size += 1 + 1;
  }

  // bool is_match_ended = 7;
  if (this->is_match_ended() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rlbot.api.GameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GameInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rlbot.api.GameInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rlbot.api.GameInfo)
    MergeFrom(*source);
  }
}

void GameInfo::MergeFrom(const GameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rlbot.api.GameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seconds_elapsed() != 0) {
    set_seconds_elapsed(from.seconds_elapsed());
  }
  if (from.game_time_remaining() != 0) {
    set_game_time_remaining(from.game_time_remaining());
  }
  if (from.is_overtime() != 0) {
    set_is_overtime(from.is_overtime());
  }
  if (from.is_unlimited_time() != 0) {
    set_is_unlimited_time(from.is_unlimited_time());
  }
  if (from.is_round_active() != 0) {
    set_is_round_active(from.is_round_active());
  }
  if (from.is_kickoff_pause() != 0) {
    set_is_kickoff_pause(from.is_kickoff_pause());
  }
  if (from.is_match_ended() != 0) {
    set_is_match_ended(from.is_match_ended());
  }
}

void GameInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rlbot.api.GameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameInfo::CopyFrom(const GameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rlbot.api.GameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInfo::IsInitialized() const {
  return true;
}

void GameInfo::Swap(GameInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameInfo::InternalSwap(GameInfo* other) {
  using std::swap;
  swap(seconds_elapsed_, other->seconds_elapsed_);
  swap(game_time_remaining_, other->game_time_remaining_);
  swap(is_overtime_, other->is_overtime_);
  swap(is_unlimited_time_, other->is_unlimited_time_);
  swap(is_round_active_, other->is_round_active_);
  swap(is_kickoff_pause_, other->is_kickoff_pause_);
  swap(is_match_ended_, other->is_match_ended_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameInfo::GetMetadata() const {
  protobuf_game_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameTickPacket::InitAsDefaultInstance() {
  ::rlbot::api::_GameTickPacket_default_instance_._instance.get_mutable()->ball_ = const_cast< ::rlbot::api::BallInfo*>(
      ::rlbot::api::BallInfo::internal_default_instance());
  ::rlbot::api::_GameTickPacket_default_instance_._instance.get_mutable()->game_info_ = const_cast< ::rlbot::api::GameInfo*>(
      ::rlbot::api::GameInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameTickPacket::kPlayersFieldNumber;
const int GameTickPacket::kPlayerIndexFieldNumber;
const int GameTickPacket::kBoostPadsFieldNumber;
const int GameTickPacket::kBallFieldNumber;
const int GameTickPacket::kGameInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameTickPacket::GameTickPacket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_5fdata_2eproto::InitDefaultsGameTickPacket();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:rlbot.api.GameTickPacket)
}
GameTickPacket::GameTickPacket(const GameTickPacket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      players_(from.players_),
      boost_pads_(from.boost_pads_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ball()) {
    ball_ = new ::rlbot::api::BallInfo(*from.ball_);
  } else {
    ball_ = NULL;
  }
  if (from.has_game_info()) {
    game_info_ = new ::rlbot::api::GameInfo(*from.game_info_);
  } else {
    game_info_ = NULL;
  }
  player_index_ = from.player_index_;
  // @@protoc_insertion_point(copy_constructor:rlbot.api.GameTickPacket)
}

void GameTickPacket::SharedCtor() {
  ::memset(&ball_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_index_) -
      reinterpret_cast<char*>(&ball_)) + sizeof(player_index_));
  _cached_size_ = 0;
}

GameTickPacket::~GameTickPacket() {
  // @@protoc_insertion_point(destructor:rlbot.api.GameTickPacket)
  SharedDtor();
}

void GameTickPacket::SharedDtor() {
  if (this != internal_default_instance()) delete ball_;
  if (this != internal_default_instance()) delete game_info_;
}

void GameTickPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameTickPacket::descriptor() {
  ::protobuf_game_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameTickPacket& GameTickPacket::default_instance() {
  ::protobuf_game_5fdata_2eproto::InitDefaultsGameTickPacket();
  return *internal_default_instance();
}

GameTickPacket* GameTickPacket::New(::google::protobuf::Arena* arena) const {
  GameTickPacket* n = new GameTickPacket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameTickPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:rlbot.api.GameTickPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  boost_pads_.Clear();
  if (GetArenaNoVirtual() == NULL && ball_ != NULL) {
    delete ball_;
  }
  ball_ = NULL;
  if (GetArenaNoVirtual() == NULL && game_info_ != NULL) {
    delete game_info_;
  }
  game_info_ = NULL;
  player_index_ = 0;
  _internal_metadata_.Clear();
}

bool GameTickPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rlbot.api.GameTickPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rlbot.api.PlayerInfo players = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 player_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .rlbot.api.BoostInfo boost_pads = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_boost_pads()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .rlbot.api.BallInfo ball = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ball()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .rlbot.api.GameInfo game_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_game_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rlbot.api.GameTickPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rlbot.api.GameTickPacket)
  return false;
#undef DO_
}

void GameTickPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rlbot.api.GameTickPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rlbot.api.PlayerInfo players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(static_cast<int>(i)), output);
  }

  // int32 player_index = 2;
  if (this->player_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_index(), output);
  }

  // repeated .rlbot.api.BoostInfo boost_pads = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->boost_pads_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->boost_pads(static_cast<int>(i)), output);
  }

  // .rlbot.api.BallInfo ball = 4;
  if (this->has_ball()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->ball_, output);
  }

  // .rlbot.api.GameInfo game_info = 5;
  if (this->has_game_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->game_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:rlbot.api.GameTickPacket)
}

::google::protobuf::uint8* GameTickPacket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rlbot.api.GameTickPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rlbot.api.PlayerInfo players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->players(static_cast<int>(i)), deterministic, target);
  }

  // int32 player_index = 2;
  if (this->player_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_index(), target);
  }

  // repeated .rlbot.api.BoostInfo boost_pads = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->boost_pads_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->boost_pads(static_cast<int>(i)), deterministic, target);
  }

  // .rlbot.api.BallInfo ball = 4;
  if (this->has_ball()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->ball_, deterministic, target);
  }

  // .rlbot.api.GameInfo game_info = 5;
  if (this->has_game_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->game_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rlbot.api.GameTickPacket)
  return target;
}

size_t GameTickPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rlbot.api.GameTickPacket)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .rlbot.api.PlayerInfo players = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players(static_cast<int>(i)));
    }
  }

  // repeated .rlbot.api.BoostInfo boost_pads = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->boost_pads_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->boost_pads(static_cast<int>(i)));
    }
  }

  // .rlbot.api.BallInfo ball = 4;
  if (this->has_ball()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->ball_);
  }

  // .rlbot.api.GameInfo game_info = 5;
  if (this->has_game_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->game_info_);
  }

  // int32 player_index = 2;
  if (this->player_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameTickPacket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rlbot.api.GameTickPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const GameTickPacket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameTickPacket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rlbot.api.GameTickPacket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rlbot.api.GameTickPacket)
    MergeFrom(*source);
  }
}

void GameTickPacket::MergeFrom(const GameTickPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rlbot.api.GameTickPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  boost_pads_.MergeFrom(from.boost_pads_);
  if (from.has_ball()) {
    mutable_ball()->::rlbot::api::BallInfo::MergeFrom(from.ball());
  }
  if (from.has_game_info()) {
    mutable_game_info()->::rlbot::api::GameInfo::MergeFrom(from.game_info());
  }
  if (from.player_index() != 0) {
    set_player_index(from.player_index());
  }
}

void GameTickPacket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rlbot.api.GameTickPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameTickPacket::CopyFrom(const GameTickPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rlbot.api.GameTickPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameTickPacket::IsInitialized() const {
  return true;
}

void GameTickPacket::Swap(GameTickPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameTickPacket::InternalSwap(GameTickPacket* other) {
  using std::swap;
  players_.InternalSwap(&other->players_);
  boost_pads_.InternalSwap(&other->boost_pads_);
  swap(ball_, other->ball_);
  swap(game_info_, other->game_info_);
  swap(player_index_, other->player_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameTickPacket::GetMetadata() const {
  protobuf_game_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace rlbot

// @@protoc_insertion_point(global_scope)
